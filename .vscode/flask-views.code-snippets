{
	"Flask views": {
		"scope": "python",
		"prefix": "fviews",
		"body": [
			"\"\"\"",
			"${1:Modulos}, vistas",
			"\"\"\"",
			"import json",
			"from flask import Blueprint, flash, redirect, render_template, request, url_for",
			"from flask_login import current_user, login_required",
			"",
			"from lib import datatables",
			"from lib.safe_string import safe_string, safe_message",
			"from plataforma_web.blueprints.usuarios.decorators import permission_required",
			"",
			"from plataforma_web.blueprints.bitacoras.models import Bitacora",
			"from plataforma_web.blueprints.modulos.models import Modulo",
			"from plataforma_web.blueprints.permisos.models import Permiso",
			"from plataforma_web.blueprints.${3:blueprint}.models import ${4:Clase}",
			"",
			"MODULO = \"${2:MODULO}\"",
			"",
			"${3:blueprint} = Blueprint('${3:blueprint}', __name__, template_folder='templates')",
			"",
			"",
			"@${3:blueprint}.before_request",
			"@login_required",
			"@permission_required(MODULO, Permiso.VER)",
			"def before_request():",
			"\t\"\"\" Permiso por defecto \"\"\"",
			"",
			""
		],
		"description": "Contenido inicial para vistas"
	},
	"Flask views list_active": {
		"scope": "python",
		"prefix": "fviews_list_active",
		"body": [
			"@${1:blueprint}.route('/${1:blueprint}')",
			"def list_active():",
			"\t\"\"\" Listado de ${2:Modulo} activos \"\"\"",
			"\t${3:registros}_activos = ${4:Clase}.query.filter(${4:Clase}.estatus == 'A').all()",
			"\treturn render_template('${1:blueprint}/list.jinja2', ${3:registros}=${3:registros}_activos, titulo='${2:Modulo}', estatus='A',)",
			"",
			""
		],
		"description": "Listado de registros activos"
	},
	"Flask views list_active json": {
		"scope": "python",
		"prefix": "fviews_list_active_json",
		"body": [
			"@${1:blueprint}.route('/${1:blueprint}')",
			"def list_active():",
			"\t\"\"\"Listado de ${2:Modulo} activos\"\"\"",
			"\treturn render_template(",
			"\t\t'${1:blueprint}/list.jinja2',",
			"\t\tfiltros=json.dumps({'estatus': 'A'}),",
			"\t\ttitulo='${2:Modulo}',",
			"\t\testatus='A',",
			"\t)",
			""
		],
		"description": "Listado de registros activos json"
	},
	"Flask views list_inactive": {
		"scope": "python",
		"prefix": "fviews_list_inactive",
		"body": [
			"@${1:blueprint}.route('/${1:blueprint}/inactivos')",
			"@permission_required(MODULO, Permiso.MODIFICAR)",
			"def list_inactive():",
			"\t\"\"\" Listado de ${2:Modulo} inactivos \"\"\"",
			"\t${3:registros}_inactivos = ${4:Clase}.query.filter(${4:Clase}.estatus == 'B').all()",
			"\treturn render_template('${1:blueprint}/list.jinja2', ${3:registros}=${3:registros}_inactivos, titulo='${2:Modulo} inactivos', estatus='B',)",
			"",
			""
		],
		"description": "Listado de registros inactivos"
	},
	"Flask views list_inactive json": {
		"scope": "python",
		"prefix": "fviews_list_inactive_json",
		"body": [
			"@${1:blueprint}.route('/${1:blueprint}/inactivos')",
			"@permission_required(MODULO, Permiso.MODIFICAR)",
			"def list_inactive():",
			"\t\"\"\"Listado de ${2:Modulo} inactivos\"\"\"",
			"\treturn render_template(",
			"\t\t'${1:blueprint}/list.jinja2',",
			"\t\tfiltros=json.dumps({'estatus': 'B'}),",
			"\t\ttitulo='${2:Modulo} inactivos',",
			"\t\testatus='B',",
			"\t)",
			""
		],
		"description": "Listado de registros inactivos json"
	},
	"Flask views search": {
		"scope": "python",
		"prefix": "fviews_search",
		"body": [
			"@${1:blueprint}.route('/${1:blueprint}/buscar', methods=['GET', 'POST'])",
			"def search():",
			"\t\"\"\" Buscar ${2:Modulo} \"\"\"",
			"\tform_search = ${3:Class}SearchForm()",
			"\tif form_search.validate_on_submit():",
			"\t\tconsulta = ${3:Class}.query",
			"\t\tif form_search.fecha_desde.data:",
			"\t\t\tconsulta = consulta.filter(${3:Class}.fecha >= form_search.fecha_desde.data)",
			"\t\tif form_search.fecha_hasta.data:",
			"\t\t\tconsulta = consulta.filter(${3:Class}.fecha <= form_search.fecha_hasta.data)",
			"\t\tif form_search.${4:nombre_o_descripcion}.data:",
			"\t\t\t${4:nombre_o_descripcion} = unidecode(form_search.${4:nombre_o_descripcion}.data.strip()).upper()  # Sin acentos y en mayúsculas, necesita from unidecode import unidecode",
			"\t\t\tconsulta = consulta.filter(${3:Class}.${4:nombre_o_descripcion}.like(f'%{${4:nombre_o_descripcion}}%'))",
			"\t\tconsulta = consulta.order_by(${3:Clase}.creado.desc()).limit(100).all()",
			"\t\treturn render_template('${1:blueprint}/list.jinja2', ${5:registros}=consulta)",
			"\treturn render_template('${1:blueprint}/search.jinja2', form=form_search)",
			"",
			""
		],
		"description": "Buscar"
	},
	"Flask views datatable json": {
		"scope": "python",
		"prefix": "fviews_datatable_json",
		"body": [
			"@${1:blueprint}.route('/${1:blueprint}/datatable_json', methods=['GET', 'POST'])",
			"def datatable_json():",
			"\t\"\"\"DataTable JSON para listado de ${2:Modulo}\"\"\"",
			"\t# Tomar parámetros de Datatables",
			"\tdraw, start, rows_per_page = datatables.get_parameters()",
			"\t# Consultar",
			"\tconsulta = ${3:Class}.query",
			"\tif 'estatus' in request.form:",
			"\t\tconsulta = consulta.filter_by(estatus=request.form['estatus'])",
			"\telse:",
			"\t\tconsulta = consulta.filter_by(estatus='A')",
			"\tregistros = consulta.order_by(${3:Class}.id.desc()).offset(start).limit(rows_per_page).all()",
			"\ttotal = consulta.count()",
			"\t# Elaborar datos para DataTable",
			"\tdata = []",
			"\tfor resultado in registros:",
			"\t\tdata.append(",
			"\t\t\t{",
			"\t\t\t\t'creado': resultado.creado.strftime('%Y-%m-%d %H:%M:%S'),",
			"\t\t\t\t'fecha': resultado.fecha.strftime('%Y-%m-%d 00:00:00'),",
			"\t\t\t\t'detalle': {",
			"\t\t\t\t\t'descripcion': resultado.descripcion,",
			"\t\t\t\t\t'url': url_for('rep_resultados.detail', rep_resultado_id=resultado.id),",
			"\t\t\t\t},",
			"\t\t\t}",
			"\t\t)",
			"\t# Entregar JSON",
			"\treturn datatables.output(draw, total, data)",
			"",
			""
		],
		"description": "DataTable JSON para listado"
	},
	"Flask views detail": {
		"scope": "python",
		"prefix": "fviews_detail",
		"body": [
			"@${1:blueprint}.route('/${1:blueprint}/<int:${2:columna_id}>')",
			"def detail(${2:columna_id}):",
			"\t\"\"\" Detalle de un ${3:Modulo} \"\"\"",
			"\t${4:registro} = ${5:Class}.query.get_or_404(${2:columna_id})",
			"\treturn render_template('${1:blueprint}/detail.jinja2', ${4:registro}=${4:registro})",
			"",
			""
		],
		"description": "Detalle de un registro"
	},
	"Flask views new": {
		"scope": "python",
		"prefix": "fviews_new",
		"body": [
			"@${1:blueprint}.route('/${1:blueprint}/nuevo', methods=['GET', 'POST'])",
			"@permission_required(MODULO, Permiso.CREAR)",
			"def new():",
			"\t\"\"\" Nuevo ${2:Modulo} \"\"\"",
			"\tform = ${3:ClassForm}()",
			"\tif form.validate_on_submit():",
			"\t\t${4:instance} = ${5:Class}(${6:nombre_o_descripcion}=form.${6:nombre_o_descripcion}.data)",
			"\t\t${4:instance}.save()",
			"\t\tflash(f'${2:description} {${4:instance}.${6:nombre_o_descripcion}} guardado.', 'success')",
			"\t\treturn redirect(url_for('${1:blueprint}.detail', ${7:column_id}=${4:instance}.id))",
			"\treturn render_template('${1:blueprint}/new.jinja2', form=form)",
			"",
			""
		],
		"description": "Nuevo registro"
	},
	"Flask views new bitacora": {
		"scope": "python",
		"prefix": "fviews_new_bitacora",
		"body": [
			"@${1:blueprint}.route('/${1:blueprint}/nuevo', methods=['GET', 'POST'])",
			"@permission_required(MODULO, Permiso.CREAR)",
			"def new():",
			"\t\"\"\" Nuevo ${2:Modulo} \"\"\"",
			"\tform = ${3:ClassForm}()",
			"\tif form.validate_on_submit():",
			"\t\t${4:instance} = ${5:Class}(${6:nombre_o_descripcion}=safe_string(form.${6:nombre_o_descripcion}.data))",
			"\t\t${4:instance}.save()",
			"\t\tbitacora = Bitacora(",
			"\t\t\tmodulo=Modulo.query.filter_by(nombre=MODULO).first(),",
			"\t\t\tusuario=current_user,",
			"\t\t\tdescripcion=safe_message(f\"Nuevo ${2:Modulo} {${4:instance}.${6:nombre_o_descripcion}}\"),",
			"\t\t\turl=url_for(\"${1:blueprint}.detail\", ${4:instance}_id=${4:instance}.id),",
			"\t\t)",
			"\t\tbitacora.save()",
			"\t\tflash(bitacora.descripcion, \"success\")",
			"\t\treturn redirect(bitacora.url)",
			"\treturn render_template('${1:blueprint}/new.jinja2', form=form)",
			"",
			""
		],
		"description": "Nuevo registro con bitacora"
	},
	"Flask views edit": {
		"scope": "python",
		"prefix": "fviews_edit",
		"body": [
			"@${1:blueprint}.route('/${1:blueprint}/edicion/<int:${2:column_id}>', methods=['GET', 'POST'])",
			"@permission_required(MODULO, Permiso.MODIFICAR)",
			"def edit(${2:column_id}):",
			"\t\"\"\" Editar ${3:Modulo} \"\"\"",
			"\t${4:instance} = ${5:Class}.query.get_or_404(${2:column_id})",
			"\tform = ${6:ClassForm}()",
			"\tif form.validate_on_submit():",
			"\t\t${4:instance}.${7:nombre_o_descripcion} = form.${7:nombre_o_descripcion}.data",
			"\t\t${4:instance}.save()",
			"\t\tflash(f'${3:Modulo} {${4:instance}.${7:nombre_o_descripcion}} guardado.', 'success')",
			"\t\treturn redirect(url_for('${1:blueprint}.detail', ${2:column_id}=${4:instance}.id))",
			"\tform.${7:nombre_o_descripcion}.data = ${4:instance}.${7:nombre_o_descripcion}",
			"\treturn render_template('${1:blueprint}/edit.jinja2', form=form, ${4:instance}=${4:instance})",
			"",
			""
		],
		"description": "Editar registro"
	},
	"Flask views edit bitacora": {
		"scope": "python",
		"prefix": "fviews_edit_bitacora",
		"body": [
			"@${1:blueprint}.route('/${1:blueprint}/edicion/<int:${2:column_id}>', methods=['GET', 'POST'])",
			"@permission_required(MODULO, Permiso.MODIFICAR)",
			"def edit(${2:column_id}):",
			"\t\"\"\" Editar ${3:Modulo} \"\"\"",
			"\t${4:instance} = ${5:Class}.query.get_or_404(${2:column_id})",
			"\tform = ${6:ClassForm}()",
			"\tif form.validate_on_submit():",
			"\t\t${4:instance}.${7:nombre_o_descripcion} = safe_string(form.${7:nombre_o_descripcion}.data)",
			"\t\t${4:instance}.save()",
			"\t\tbitacora = Bitacora(",
			"\t\t\tmodulo=Modulo.query.filter_by(nombre=MODULO).first(),",
			"\t\t\tusuario=current_user,",
			"\t\t\tdescripcion=safe_message(f\"Editado ${3:Modulo} {${4:instance}.${7:nombre_o_descripcion}}\"),",
			"\t\t\turl=url_for(\"${1:blueprint}.detail\", ${4:instance}_id=${4:instance}.id),",
			"\t\t)",
			"\t\tbitacora.save()",
			"\t\tflash(bitacora.descripcion, \"success\")",
			"\t\treturn redirect(bitacora.url)",
			"\tform.${7:nombre_o_descripcion}.data = ${4:instance}.${7:nombre_o_descripcion}",
			"\treturn render_template('${1:blueprint}/edit.jinja2', form=form, ${4:instance}=${4:instance})",
			"",
			""
		],
		"description": "Editar registro con bitacora"
	},
	"Flask views delete": {
		"scope": "python",
		"prefix": "fviews_delete",
		"body": [
			"@${1:blueprint}.route('/${1:blueprint}/eliminar/<int:${2:column_id}>')",
			"@permission_required(MODULO, Permiso.MODIFICAR)",
			"def delete(${2:column_id}):",
			"\t\"\"\" Eliminar ${3:Modulo} \"\"\"",
			"\t${4:instance} = ${5:Class}.query.get_or_404(${2:column_id})",
			"\tif ${4:instance}.estatus == 'A':",
			"\t\t${4:instance}.delete()",
			"\t\tflash(f'${3:Modulo} {${4:instance}.${6:nombre_o_descripcion}} eliminado.', 'success')",
			"\treturn redirect(url_for('${1:blueprint}.detail', ${2:column_id}=${4:instance}.id))",
			"",
			""
		],
		"description": "Borrar registro"
	},
	"Flask views delete bitacora": {
		"scope": "python",
		"prefix": "fviews_delete_bitacora",
		"body": [
			"@${1:blueprint}.route('/${1:blueprint}/eliminar/<int:${2:column_id}>')",
			"@permission_required(MODULO, Permiso.MODIFICAR)",
			"def delete(${2:column_id}):",
			"\t\"\"\" Eliminar ${3:Modulo} \"\"\"",
			"\t${4:instance} = ${5:Class}.query.get_or_404(${2:column_id})",
			"\tif ${4:instance}.estatus == 'A':",
			"\t\t${4:instance}.delete()",
			"\t\tbitacora = Bitacora(",
			"\t\t\tmodulo=Modulo.query.filter_by(nombre=MODULO).first(),",
			"\t\t\tusuario=current_user,",
			"\t\t\tdescripcion=safe_message(f\"Eliminado ${3:Modulo} {${4:instance}.${6:nombre_o_descripcion}}\"),",
			"\t\t\turl=url_for(\"${1:blueprint}.detail\", ${4:instance}_id=${4:instance}.id),",
			"\t\t)",
			"\t\tbitacora.save()",
			"\t\tflash(bitacora.descripcion, \"success\")",
			"\treturn redirect(url_for('${1:blueprint}.detail', ${2:column_id}=${4:instance}.id))",
			"",
			""
		],
		"description": "Borrar registro con bitacora"
	},
	"Flask views recover": {
		"scope": "python",
		"prefix": "fviews_recover",
		"body": [
			"@${1:blueprint}.route('/${1:blueprint}/recuperar/<int:${2:column_id}>')",
			"@permission_required(MODULO, Permiso.MODIFICAR)",
			"def recover(${2:column_id}):",
			"\t\"\"\" Recuperar ${3:Modulo} \"\"\"",
			"\t${4:instance} = ${5:Class}.query.get_or_404(${2:column_id})",
			"\tif ${4:instance}.estatus == 'B':",
			"\t\t${4:instance}.recover()",
			"\t\tflash(f'${3:Modulo} {${4:instance}.${6:nombre_o_descripcion}} recuperado.', 'success')",
			"\treturn redirect(url_for('${1:blueprint}.detail', ${2:column_id}=${4:instance}.id))",
			"",
			""
		],
		"description": "Recuperar registro"
	},
	"Flask views recover bitacora": {
		"scope": "python",
		"prefix": "fviews_recover_bitacora",
		"body": [
			"@${1:blueprint}.route('/${1:blueprint}/recuperar/<int:${2:column_id}>')",
			"@permission_required(MODULO, Permiso.MODIFICAR)",
			"def recover(${2:column_id}):",
			"\t\"\"\" Recuperar ${3:Modulo} \"\"\"",
			"\t${4:instance} = ${5:Class}.query.get_or_404(${2:column_id})",
			"\tif ${4:instance}.estatus == 'B':",
			"\t\t${4:instance}.recover()",
			"\t\tbitacora = Bitacora(",
			"\t\t\tmodulo=Modulo.query.filter_by(nombre=MODULO).first(),",
			"\t\t\tusuario=current_user,",
			"\t\t\tdescripcion=safe_message(f\"Recuperado ${3:Modulo} {${4:instance}.${6:nombre_o_descripcion}}\"),",
			"\t\t\turl=url_for(\"${1:blueprint}.detail\", ${4:instance}_id=${4:instance}.id),",
			"\t\t)",
			"\t\tbitacora.save()",
			"\t\tflash(bitacora.descripcion, \"success\")",
			"\treturn redirect(url_for('${1:blueprint}.detail', ${2:column_id}=${4:instance}.id))",
			"",
			""
		],
		"description": "Recuperar registro con bitacora"
	},
	"Flask bitacora save": {
		"scope": "python",
		"prefix": "fviews_bitacora_save",
		"body": [
			"bitacora = Bitacora(",
			"\tmodulo=Modulo.query.filter_by(nombre=MODULO).first(),",
			"\tusuario=current_user,",
			"\tdescripcion=safe_message('${1:Nuevo/Editado/Eliminado/Recuperado} registro con...'),",
			"\turl=url_for('${2:blueprint}.detail', ${3:column_id}=${4:instance}.id),",
			")",
			"bitacora.save()",
			"flash(bitacora.descripcion, 'success')",
			"return redirect(bitacora.url)"
		],
		"description": "Bitacora save"
	}
}
