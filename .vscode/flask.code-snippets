{
	"Flask views top": {
		"scope": "python",
		"prefix": "fviews_top",
		"body": [
			"from flask import Blueprint, flash, redirect, render_template, url_for",
			"from flask_login import login_required",
			"from ${1:web_system}.blueprints.roles.models import Permiso",
			"from ${1:web_system}.blueprints.usuarios.decorators import permission_required",
			"",
			""
		],
		"description": "Cargar paquetes"
	},
	"Flask views blueprint": {
		"scope": "python",
		"prefix": "fviews_blueprint",
		"body": "${1:blueprint} = Blueprint('${1:blueprint}', __name__, template_folder='templates')",
		"description": "Blueprint"
	},
	"Flask views permission": {
		"scope": "python",
		"prefix": "fviews_permission",
		"body": [
			"@${1:blueprint}.before_request",
			"@login_required",
			"@permission_required(Permiso.VER_CONTENIDOS)",
			"def before_request():",
			"\t\"\"\" Permiso por defecto \"\"\"",
			"",
			""
		],
		"description": "Permiso por defecto para las vistas que siguen"
	},
	"Flask views list_active": {
		"scope": "python",
		"prefix": "fviews_list_active",
		"body": [
			"@${1:blueprint}.route('/${1:blueprint}')",
			"def list_active():",
			"\t\"\"\" Listado de ${2:Modulo} activos \"\"\"",
			"\t${3:registros}_activos = ${4:Clase}.query.filter(${4:Clase}.estatus == 'A').all()",
			"\treturn render_template('${1:blueprint}/list.jinja2', ${3:registros}=${3:registros}_activos, estatus='A')",
			"",
			""
		],
		"description": "Listado de registros activos"
	},
	"Flask views list_inactive": {
		"scope": "python",
		"prefix": "fviews_list_inactive",
		"body": [
			"@${1:blueprint}.route('/${1:blueprint}/inactivos')",
			"def list_inactive():",
			"\t\"\"\" Listado de ${2:Modulo} inactivos \"\"\"",
			"\t${3:registros}_inactivos = ${4:Clase}.query.filter(${4:Clase}.estatus == 'B').all()",
			"\treturn render_template('${1:blueprint}/list.jinja2', ${3:registros}=${3:registros}_inactivos, estatus='B')",
			"",
			""
		],
		"description": "Listado de registros inactivos"
	},
	"Flask views detail": {
		"scope": "python",
		"prefix": "fviews_detail",
		"body": [
			"@${1:blueprint}.route('/${1:blueprint}/<int:${2:columna_id}>')",
			"def detail(${2:columna_id}):",
			"\t\"\"\" Detalle de un ${3:Modulo} \"\"\"",
			"\t${4:registro} = ${5:Class}.query.get_or_404(${2:columna_id})",
			"\treturn render_template('${1:blueprint}/detail.jinja2', ${4:registro}=${4:registro})",
			"",
			""
		],
		"description": "Detalle de un registro"
	},
	"Flask views new": {
		"scope": "python",
		"prefix": "fviews_new",
		"body": [
			"@${1:blueprint}.route('/${1:blueprint}/nuevo', methods=['GET', 'POST'])",
			"@permission_required(Permiso.CREAR_CONTENIDOS)",
			"def new():",
			"\t\"\"\" Nuevo ${2:Modulo} \"\"\"",
			"\tform = ${3:ClassForm}()",
			"\tif form.validate_on_submit():",
			"\t\t${4:instance} = ${5:Class}(${6:nombre_o_descripcion}=form.${6:nombre_o_descripcion}.data)",
			"\t\t${4:instance}.save()",
			"\t\tflash(f'${2:description} {${4:instance}.${6:nombre_o_descripcion}} guardado.', 'success')",
			"\t\treturn redirect(url_for('${1:blueprint}.list_active'))",
			"\treturn render_template('${1:blueprint}/new.jinja2', form=form)",
			"",
			""
		],
		"description": "Nuevo registro"
	},
	"Flask views edit": {
		"scope": "python",
		"prefix": "fviews_edit",
		"body": [
			"@${1:blueprint}.route('/${1:blueprint}/edicion/<int:${2:column_id}>', methods=['GET', 'POST'])",
			"@permission_required(Permiso.MODIFICAR_CONTENIDOS)",
			"def edit(${2:column_id}):",
			"\t\"\"\" Editar ${3:Modulo} \"\"\"",
			"\t${4:instance} = ${5:Class}.query.get_or_404(${2:column_id})",
			"\tform = ${6:ClassForm}()",
			"\tif form.validate_on_submit():",
			"\t\t${4:instance}.${7:nombre_o_descripcion} = form.${7:nombre_o_descripcion}.data",
			"\t\t${4:instance}.save()",
			"\t\tflash(f'${3:Modulo} {${4:instance}.${7:nombre_o_descripcion}} guardado.', 'success')",
			"\t\treturn redirect(url_for('${1:blueprint}.detail', ${2:column_id}=${4:instance}.id))",
			"\tform.${7:nombre_o_descripcion}.data = ${4:instance}.${7:nombre_o_descripcion}",
			"\treturn render_template('${1:blueprint}/edit.jinja2', form=form, ${4:instance}=${4:instance})",
			"",
			""
		],
		"description": "Editar registro"
	},
	"Flask views delete": {
		"scope": "python",
		"prefix": "fviews_delete",
		"body": [
			"@${1:blueprint}.route('/${1:blueprint}/eliminar/<int:${2:column_id}>')",
			"@permission_required(Permiso.MODIFICAR_CONTENIDOS)",
			"def delete(${2:column_id}):",
			"\t\"\"\" Eliminar ${3:Modulo} \"\"\"",
			"\t${4:instance} = ${5:Class}.query.get_or_404(${2:column_id})",
			"\tif ${4:instance}.estatus == 'A':",
			"\t\t${4:instance}.delete()",
			"\t\tflash(f'${3:Modulo} {${4:instance}.${5:nombre_o_descripcion}} eliminado.', 'success')",
			"\treturn redirect(url_for('${1:blueprint}.detail', ${2:column_id}=${2:column_id}))",
			"",
			""
		],
		"description": "Borrar registro"
	},
	"Flask views recover": {
		"scope": "python",
		"prefix": "fviews_recover",
		"body": [
			"@${1:blueprint}.route('/${1:blueprint}/recuperar/<int:${2:column_id}>')",
			"@permission_required(Permiso.MODIFICAR_CONTENIDOS)",
			"def recover(${2:column_id}):",
			"\t\"\"\" Recuperar ${3:Modulo} \"\"\"",
			"\t${4:instance} = ${5:Class}.query.get_or_404(${2:column_id})",
			"\tif ${4:instance}.estatus == 'B':",
			"\t\t${4:instance}.recover()",
			"\t\tflash(f'${3:Modulo} {${4:instance}.${5:nombre_o_descripcion}} recuperado.', 'success')",
			"\treturn redirect(url_for('${1:blueprint}.detail', ${2:column_id}=${2:column_id}))",
			"",
			""
		],
		"description": "Recuperar registro"
	},
	"Flask models top": {
		"scope": "python",
		"prefix": "fmodels_top",
		"body": [
			"from ${1:web_system}.extensions import db",
			"from lib.universal_mixin import UniversalMixin",
			"",
			""
		],
		"description": "Cargar paquetes"
	},
	"Flask models model": {
		"scope": "python",
		"prefix": "fmodels_class",
		"body": [
			"class ${1:Class}(db.Model, UniversalMixin):",
			"\t\"\"\" ${1:Class} \"\"\"",
			"",
			"\t# Nombre de la tabla",
			"\t__tablename__ = '${2:table}'",
			"",
			"\t# Clave primaria",
			"\tid = db.Column(db.Integer, primary_key=True)",
			"",
			"\t# Columnas",
			"\tnombre = db.Column(db.String(256), unique=True, nullable=False)",
			"\tdescripcion = db.Column(db.String(256), nullable=False)",
			"",
			"\tdef __repr__(self):",
			"\t\t\"\"\" Representación \"\"\"",
			"\t\treturn f'<${1:Class} {self.nombre}>'",
			"",
			""
		],
		"description": "Modelo"
	},
	"Flask models foreign key": {
		"scope": "python",
		"prefix": "fmodels_class_foreign_key",
		"body": [
			"# Clave foránea",
			"${1:column}_id = db.Column(",
			"\t'${1:column}',",
			"\tdb.Integer,",
			"\tdb.ForeignKey('${2:table}.id'),",
			"\tindex=True,",
			"\tnullable=False",
			")",
			""
		],
		"description": "Clave foránea"
	},
	"Flask models child": {
		"scope": "python",
		"prefix": "fmodels_class_child",
		"body": "${1:plural} = db.relationship('${2:Name}', backref='${3:column}')",
		"description": "Hijo"
	},
	"Flask forms top": {
		"scope": "python",
		"prefix": "fforms_top",
		"body": [
			"from flask_wtf import FlaskForm",
			"from wtforms import HiddenField, PasswordField, StringField, SubmitField",
			"from wtforms.ext.sqlalchemy.fields import QuerySelectField",
			"from wtforms.validators import DataRequired, Email, EqualTo, Length, Optional",
			"",
			""
		],
		"description": "Cargar paquetes"
	},
	"Flask forms query select function": {
		"scope": "python",
		"prefix": "fforms_function_query_for_select",
		"body": [
			"def ${1:plural}_opciones():",
			"\t\"\"\" ${2:Description}: opciones para select \"\"\"",
			"\treturn ${3:Class}.query.filter(${3:Class}.estatus == 'A').order_by(${3:Class}.${4:nombre_o_descripcion}).all()",
			""
		],
		"description": "Función que consulta para las opciones de un select"
	},
	"Flask forms form": {
		"scope": "python",
		"prefix": "fforms_class",
		"body": [
			"class ${1:ClassForm}(FlaskForm):",
			"\t\"\"\" Formulario ${2:Modulo} \"\"\"",
			"\tnombre = StringField('Nombre', validators=[DataRequired(), Length(max=256)])",
			"\tguardar = SubmitField('Guardar')",
			"",
			""
		],
		"description": "Formulario"
	},
	"Flask forms query select field": {
		"scope": "python",
		"prefix": "fforms_field_query_select",
		"body": "${1:column} = QuerySelectField(query_factory=${2:plural}_opciones, get_label='${3:nombre_o_descripcion}')",
		"description": "Campo select con opciones de una función que consulta"
	}
}
